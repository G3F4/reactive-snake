{"version":3,"sources":["enums.ts","models/PointModel.ts","models/SnakeModel.ts","components/game/cell/Cell.tsx","components/game/GameContext.ts","components/game/end/End.tsx","components/game/fruit/Fruit.tsx","components/game/menu/Menu.tsx","components/game/snake-body/SnakeBody.tsx","components/game/snake-head/SnakeHead.tsx","components/game/Game.tsx","components/app/App.tsx","constans.ts","index.tsx"],"names":["Direction","GameState","PointModel","x","y","Object","classCallCheck","this","createClass","key","value","point","gridSize","Math","floor","random","SnakeModel","body","direction","arguments","length","undefined","RIGHT","_this$body","toArray","head","slice","findIndex","bodyPart","equals","slicedToArray","tail","TOP","concat","toConsumableArray","BOTTOM","LEFT","canChangeDirection","Cell","react_default","a","createElement","className","GameContext","createContext","state","MENU","onResetGame","onStateChange","_state","End","useContext","onClick","Fruit","Menu","_useContext","handleResume","useCallback","PLAY","SnakeBody","SnakeHead","Game","_ref","fruit","snake","game_menu_Menu","END","game_end_End","Array","from","map","index","osY","osX","snakeCellIndex","game_snake_head_SnakeHead","game_snake_body_SnakeBody","game_fruit_Fruit","game_cell_Cell","moveInterval","setInterval","App","_useState","useState","_useState2","gameState","setGameState","_useState3","_useState4","speed","setSpeed","_useState5","_useState6","setFruit","_useState7","initialSnake","_useState8","setSnake","useEffect","document","onkeydown","e","keyCode","setDirection","clearInterval","movedSnake","move","snakeEatenSelf","hasEatenSelf","snakeLeftGrid","hasLeftGrid","getHead","feedSnake","s","ceil","handleResetGame","game_GameContext","Provider","components_game_Game","ReactDOM","render","components_app_App","getElementById"],"mappings":"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","file":"static/js/main.f028ffe9.chunk.js","sourcesContent":["export enum Direction {\n  TOP = 'TOP',\n  BOTTOM = 'BOTTOM',\n  LEFT = 'LEFT',\n  RIGHT = 'RIGHT',\n}\n\nexport enum GameState {\n  MENU = 'MENU',\n  PLAY = 'PLAY',\n  END = 'END',\n}\n","export class PointModel {\n  constructor(\n    readonly x: number,\n    readonly y: number,\n  ) {}\n\n  public equals(point: PointModel): boolean {\n    return this.x === point.x && this.y === point.y;\n  }\n\n  public static random(gridSize: number): PointModel {\n    return new PointModel(Math.floor(Math.random() * gridSize), Math.floor(Math.random() * gridSize));\n  }\n}\n","import { Direction } from '../enums';\nimport { PointModel } from './PointModel';\n\nexport class SnakeModel {\n  constructor(\n    readonly body: PointModel[],\n    readonly direction: Direction = Direction.RIGHT,\n  ) {}\n\n  public static initialSnake(gridSize: number): SnakeModel {\n    return new SnakeModel(\n      [\n        new PointModel(gridSize / 2, gridSize / 2),\n        new PointModel(gridSize / 2, gridSize / 2 + 1),\n      ],\n      Direction.LEFT,\n    );\n  }\n\n  getHead(): PointModel {\n    return this.body[0];\n  }\n\n  hasEatenSelf(): boolean {\n    const [head, ...body] = this.body;\n\n    return body.findIndex(bodyPart => bodyPart.equals(head)) >= 0;\n  }\n\n  hasLeftGrid(gridSize: number): boolean {\n    const [head] = this.body;\n\n    return head.x < 0 || head.y < 0 || head.x > gridSize - 1 || head.y > gridSize - 1;\n  }\n\n  feedSnake(): SnakeModel {\n    const tail = this.body[this.body.length - 1];\n\n    switch (this.direction) {\n      case Direction.TOP:\n        return new SnakeModel(\n          [\n            ...this.body,\n            new PointModel(tail.x, tail.y - 1),\n          ],\n          this.direction\n        );\n      case Direction.BOTTOM:\n        return new SnakeModel(\n          [\n            ...this.body,\n            new PointModel(tail.x, tail.y + 1),\n          ],\n          this.direction\n        );\n      case Direction.LEFT:\n        return new SnakeModel(\n          [\n            ...this.body,\n            new PointModel(tail.x + 1, tail.y),\n          ],\n          this.direction\n        );\n      case Direction.RIGHT:\n        return new SnakeModel(\n          [\n            ...this.body,\n            new PointModel(tail.x - 1, tail.y - 1),\n          ],\n          this.direction\n        );\n    }\n\n    return this;\n  }\n\n  public move(): SnakeModel {\n    switch (this.direction) {\n      case Direction.TOP:\n        return new SnakeModel(\n          [\n            new PointModel(this.body[0].x, this.body[0].y - 1),\n            ...this.body.slice(0, this.body.length - 1),\n          ],\n          this.direction\n        );\n      case Direction.BOTTOM:\n        return new SnakeModel(\n          [\n            new PointModel(this.body[0].x, this.body[0].y + 1),\n            ...this.body.slice(0, this.body.length - 1),\n          ],\n          this.direction\n        );\n      case Direction.LEFT:\n        return new SnakeModel(\n          [\n            new PointModel(this.body[0].x - 1, this.body[0].y),\n            ...this.body.slice(0, this.body.length - 1),\n          ],\n          this.direction\n        );\n      case Direction.RIGHT:\n        return new SnakeModel(\n          [\n            new PointModel(this.body[0].x + 1, this.body[0].y),\n            ...this.body.slice(0, this.body.length - 1),\n          ],\n          this.direction\n        );\n    }\n\n    return this;\n  }\n\n  public setDirection(direction: Direction): SnakeModel {\n    if (this.canChangeDirection(direction)) {\n      return new SnakeModel(\n        this.body,\n        direction,\n      );\n    }\n\n    return this;\n  }\n\n  private canChangeDirection(direction: Direction) {\n    switch (direction) {\n      case Direction.TOP: {\n        return this.direction !== Direction.BOTTOM;\n      }\n      case Direction.BOTTOM: {\n        return this.direction !== Direction.TOP;\n      }\n      case Direction.LEFT: {\n        return this.direction !== Direction.RIGHT;\n      }\n      case Direction.RIGHT: {\n        return this.direction !== Direction.LEFT;\n      }\n      default:\n        return true;\n    }\n  }\n}\n","import React from 'react';\nimport './Cell.css';\n\nconst Cell: React.FC = () => <div className=\"Cell\" />;\n\nexport default Cell;\n","import { createContext } from 'react';\nimport { GameState } from '../../enums';\n\nexport interface GameContextProps {\n  state: GameState;\n\n  onResetGame(): void;\n  onStateChange(state: GameState): void;\n}\n\nconst GameContext = createContext<GameContextProps>({\n  state: GameState.MENU,\n\n  // tslint:disable-next-line:no-empty\n  onResetGame() {},\n  onStateChange(_state: GameState) {},\n});\n\nexport default GameContext;\n","import React, { useContext } from 'react';\nimport GameContext from '../GameContext';\nimport './End.css';\n\nconst End: React.FC = () => {\n  const { onResetGame } = useContext(GameContext);\n\n  return (\n    <div className=\"End\">\n      <div>\n        <button className=\"EndResumeButton\" onClick={onResetGame}>PLAY AGAIN</button>\n      </div>\n    </div>\n  );\n};\n\nexport default End;\n","import React from 'react';\nimport './Fruit.css';\n\nconst Fruit: React.FC = () => <div className=\"Fruit\" />;\n\nexport default Fruit;\n","import React, { useCallback, useContext } from 'react';\nimport { GameState } from '../../../enums';\nimport GameContext from '../GameContext';\nimport './Menu.css';\n\nconst Menu: React.FC = () => {\n  const { state, onStateChange } = useContext(GameContext);\n  const handleResume = useCallback(() => {\n    if (state === GameState.MENU) {\n      onStateChange(GameState.PLAY);\n    }\n  }, [state, onStateChange]);\n\n  return (\n    <div className=\"Menu\">\n      <div>\n        <button className=\"MenuResumeButton\" onClick={handleResume}>RESUME</button>\n      </div>\n    </div>\n  );\n};\n\nexport default Menu;\n","import React from 'react';\nimport './SnakeBody.css';\n\nconst SnakeBody: React.FC = () => <div className=\"SnakeBody\" />;\n\nexport default SnakeBody;\n","import React from 'react';\nimport './SnakeHead.css';\n\nconst SnakeHead: React.FC = () => <div className=\"SnakeHead\" />;\n\nexport default SnakeHead;\n","import React from 'react';\nimport { GameState } from '../../enums';\nimport { PointModel } from '../../models/PointModel';\nimport { SnakeModel } from '../../models/SnakeModel';\nimport './Game.css';\nimport Cell from './cell/Cell';\nimport End from './end/End';\nimport Fruit from './fruit/Fruit';\nimport Menu from './menu/Menu';\nimport SnakeBody from './snake-body/SnakeBody';\nimport SnakeHead from './snake-head/SnakeHead';\n\ninterface GameProps {\n  gridSize: number;\n  snake: SnakeModel;\n  fruit: PointModel;\n  state: GameState;\n}\n\nconst Game: React.FC<GameProps> = ({ fruit, snake, gridSize, state }) => (\n  <div className=\"Game\">\n    {state === GameState.MENU && (\n      <Menu />\n    )}\n    {state === GameState.END && (\n      <End />\n    )}\n    {Array.from({ length: gridSize })\n      .map((value, index) => index)\n      .map(osY => (\n        <div className=\"OsX\" key={osY}>\n          {Array.from({ length: gridSize })\n            .map((value, index) => index)\n            .map(osX => {\n              const snakeCellIndex = snake.body\n                .findIndex(bodyPart => bodyPart.x === osX && bodyPart.y === osY);\n              const snakeCell = snakeCellIndex >= 0;\n\n              if (snakeCell) {\n                if (snakeCellIndex === 0) {\n                  return <SnakeHead key={osX} />;\n                }\n\n                return <SnakeBody key={osX} />;\n              }\n\n              if (osX === fruit.x && osY === fruit.y) {\n                return (\n                  <Fruit key={osX} />\n                );\n              }\n\n              return (\n                <Cell key={osX} />\n              );\n            })\n          }\n        </div>\n      ))\n    }\n  </div>\n);\n\nexport default Game;\n","import React, { KeyboardEvent, useCallback, useEffect, useState } from 'react';\nimport { GRID_SIZE, INITIAL_SPEED } from '../../constans';\nimport { Direction, GameState } from '../../enums';\nimport { PointModel } from '../../models/PointModel';\nimport { SnakeModel } from '../../models/SnakeModel';\nimport Game from '../game/Game';\nimport GameContext from '../game/GameContext';\nimport './App.css';\n\nlet moveInterval = setInterval(() => {}, 1000000);\n\nconst App: React.FC = () => {\n  const [gameState, setGameState] = useState(GameState.PLAY);\n  const [speed, setSpeed] = useState(INITIAL_SPEED);\n  const [fruit, setFruit] = useState(PointModel.random(GRID_SIZE));\n  const [snake, setSnake] = useState(SnakeModel.initialSnake(GRID_SIZE));\n\n  useEffect(() => {\n    const handleKeyPressed = (e: KeyboardEvent) => {\n      if (e.keyCode === 38 || e.keyCode === 87) { // up arrow\n        setSnake(snake => snake.setDirection(Direction.TOP));\n      }\n      else if (e.keyCode === 40 || e.keyCode === 83) { // down arrow\n        setSnake(snake => snake.setDirection(Direction.BOTTOM));\n      }\n      else if (e.keyCode === 37 || e.keyCode === 65) { // left arrow\n        setSnake(snake => snake.setDirection(Direction.LEFT));\n      }\n      else if (e.keyCode === 39 || e.keyCode === 68) { // right arrow\n        setSnake(snake => snake.setDirection(Direction.RIGHT));\n      }\n      else if (e.keyCode === 27) { // right arrow\n        if (gameState === GameState.PLAY) {\n          setGameState(GameState.MENU);\n        }\n      }\n    };\n\n    // @ts-ignore\n    document.onkeydown = handleKeyPressed;\n\n    // #todo dlaczego to nie działa?\n    // document.addEventListener(\"onkeydown\", handleKeyPressed);\n    //\n    // return () => {\n    //   document.removeEventListener(\"onkeydown\", handleKeyPressed);\n    // }\n  }, [gameState]);\n\n  useEffect(() => {\n    clearInterval(moveInterval);\n    moveInterval = setInterval(() => {\n      if (gameState === GameState.PLAY) {\n        setSnake(snake => {\n          const movedSnake = snake.move();\n          const snakeEatenSelf = movedSnake.hasEatenSelf();\n          const snakeLeftGrid = movedSnake.hasLeftGrid(GRID_SIZE);\n\n          if (snakeEatenSelf || snakeLeftGrid) {\n            setGameState(GameState.END);\n\n            return snake;\n          }\n\n          return movedSnake;\n        });\n      }\n    }, speed);\n  }, [gameState, speed]);\n\n  useEffect(() => {\n    const fruitEaten = snake.getHead().equals(fruit);\n\n    if (fruitEaten) {\n      setSnake(snake => snake.feedSnake());\n      setFruit(PointModel.random(GRID_SIZE));\n      setSpeed(s => Math.ceil(s * 0.7));\n    }\n  }, [snake, fruit]);\n\n  const handleResetGame = useCallback(() => {\n    setGameState(GameState.PLAY);\n    setSnake(SnakeModel.initialSnake(GRID_SIZE));\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <GameContext.Provider value={{\n        state: gameState,\n        onStateChange: setGameState,\n        onResetGame: handleResetGame,\n      }}>\n        <Game gridSize={GRID_SIZE} snake={snake} fruit={fruit} state={gameState} />\n      </GameContext.Provider>\n    </div>\n  );\n};\n\nexport default App;\n","export const GRID_SIZE = 50;\nexport const INITIAL_SPEED = 300;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}