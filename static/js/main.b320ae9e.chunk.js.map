{"version":3,"sources":["enums.ts","models/Point.ts","models/Snake.ts","components/game/cell/Cell.tsx","components/game/Game.tsx","components/app/App.tsx","constans.ts","index.tsx"],"names":["DIRECTION","Point","x","y","Object","classCallCheck","this","Snake","body","direction","arguments","length","undefined","RIGHT","createClass","key","value","TOP","concat","toConsumableArray","slice","BOTTOM","LEFT","Cell","_ref","snakeCell","react_default","a","createElement","className","Game","snake","gridSize","Array","from","map","index","osY","osX","findIndex","bodyPart","game_cell_Cell","App","_useState","useState","GRID_SIZE","_useState2","slicedToArray","setSnake","useEffect","document","onkeydown","e","keyCode","setDirection","setInterval","move","components_game_Game","ReactDOM","render","components_app_App","getElementById"],"mappings":"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","file":"static/js/main.b320ae9e.chunk.js","sourcesContent":["export enum DIRECTION {\n  TOP = 'TOP',\n  BOTTOM = 'BOTTOM',\n  LEFT = 'LEFT',\n  RIGHT = 'RIGHT',\n}\n","export class Point {\n  constructor(\n    readonly x: number,\n    readonly y: number,\n  ) {}\n}\n","import { DIRECTION } from '../enums';\nimport { Point } from './Point';\n\nexport class Snake {\n  constructor(\n    readonly body: Point[],\n    readonly direction: DIRECTION = DIRECTION.RIGHT,\n  ) {}\n\n  public move(): Snake {\n    switch (this.direction) {\n      case DIRECTION.TOP:\n        return new Snake(\n          [\n            new Point(this.body[0].x, this.body[0].y - 1),\n            ...this.body.slice(0, this.body.length - 1),\n          ],\n          this.direction\n        );\n      case DIRECTION.BOTTOM:\n        return new Snake(\n          [\n            new Point(this.body[0].x, this.body[0].y + 1),\n            ...this.body.slice(0, this.body.length - 1),\n          ],\n          this.direction\n        );\n      case DIRECTION.LEFT:\n        return new Snake(\n          [\n            new Point(this.body[0].x - 1, this.body[0].y),\n            ...this.body.slice(0, this.body.length - 1),\n          ],\n          this.direction\n        );\n      case DIRECTION.RIGHT:\n        return new Snake(\n          [\n            new Point(this.body[0].x + 1, this.body[0].y),\n            ...this.body.slice(0, this.body.length - 1),\n          ],\n          this.direction\n        );\n    }\n\n    return this;\n  }\n\n  public setDirection(direction: DIRECTION): Snake {\n    return new Snake(\n      this.body,\n      direction,\n    );\n  }\n}\n","import React from 'react';\nimport './Cell.css';\n\ninterface GameProps {\n  snakeCell: boolean;\n}\n\nconst Cell: React.FC<GameProps> = ({ snakeCell }) => snakeCell ? (\n  <div className=\"SnakePart\" />\n) : (\n  <div className=\"GridCell\" />\n);\n\nexport default Cell;\n","import React from 'react';\nimport { Snake } from '../../models/Snake';\nimport './Game.css';\nimport Cell from './cell/Cell';\n\ninterface GameProps {\n  gridSize: number;\n  snake: Snake;\n}\n\nconst Game: React.FC<GameProps> = ({ snake, gridSize }) => (\n  <div className=\"Game\">\n    {Array.from({ length: gridSize })\n      .map((value, index) => index)\n      .map(osY => (\n        <div className=\"OsX\">\n          {Array.from({ length: gridSize })\n            .map((value, index) => index)\n            .map(osX => {\n              const snakeCell = snake.body\n                .findIndex(bodyPart => bodyPart.x === osX && bodyPart.y === osY) >= 0;\n\n              return (\n                <Cell snakeCell={snakeCell} />\n              );\n            })\n          }\n        </div>\n      ))\n    }\n  </div>\n);\n\nexport default Game;\n","import React, { useEffect, useState } from 'react';\nimport { GRID_SIZE, TICK } from '../../constans';\nimport { DIRECTION } from '../../enums';\nimport { Point } from '../../models/Point';\nimport { Snake } from '../../models/Snake';\nimport Game from '../game/Game';\nimport './App.css';\n\nconst App: React.FC = () => {\n  const [snake, setSnake] = useState(\n    new Snake(\n      [\n        new Point(GRID_SIZE / 2, GRID_SIZE / 2),\n        new Point(GRID_SIZE / 2, GRID_SIZE / 2 + 1),\n      ],\n    ),\n  );\n\n  useEffect(() => {\n    const handleKeyPressed = (e: any) => {\n      if (e.keyCode === 38) { // up arrow\n        setSnake(snake => snake.setDirection(DIRECTION.TOP));\n      }\n      else if (e.keyCode === 40) { // down arrow\n        setSnake(snake => snake.setDirection(DIRECTION.BOTTOM));\n      }\n      else if (e.keyCode === 37) { // left arrow\n        setSnake(snake => snake.setDirection(DIRECTION.LEFT));\n      }\n      else if (e.keyCode === 39) { // right arrow\n        setSnake(snake => snake.setDirection(DIRECTION.RIGHT));\n      }\n    };\n\n    document.onkeydown = handleKeyPressed;\n\n    // #todo dlaczego to nie dziaÅ‚a?\n    // document.addEventListener(\"onkeydown\", handleKeyPressed);\n    //\n    // return () => {\n    //   document.removeEventListener(\"onkeydown\", handleKeyPressed);\n    // }\n  }, []);\n\n  useEffect(() => {\n    setInterval(() => {\n      setSnake(snake => snake.move());\n    }, TICK);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Game gridSize={GRID_SIZE} snake={snake} />\n    </div>\n  );\n};\n\nexport default App;\n","export const GRID_SIZE = 50;\nexport const TICK = 500;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}