{"version":3,"sources":["enums.ts","components/game/cell/Cell.tsx","components/game/GameContext.ts","components/game/end/End.tsx","components/game/fruit/Fruit.tsx","components/game/menu/Menu.tsx","components/game/snake-body/SnakeBody.tsx","components/game/snake-head/SnakeHead.tsx","components/game/Game.tsx","models/PointModel.ts","models/SnakeModel.ts","components/game/useGame.ts","components/app/App.tsx","constans.ts","index.tsx"],"names":["Direction","GameState","Cell","react_default","a","createElement","className","GameContext","createContext","state","MENU","onResetGame","onStateChange","_state","End","useContext","onClick","Fruit","Menu","_useContext","handleResume","useCallback","PLAY","SnakeBody","SnakeHead","Game","_ref","fruit","snake","gridSize","game_menu_Menu","END","game_end_End","Array","from","length","map","value","index","osY","key","osX","snakeCellIndex","body","findIndex","bodyPart","x","y","game_snake_head_SnakeHead","game_snake_body_SnakeBody","game_fruit_Fruit","game_cell_Cell","PointModel","Object","classCallCheck","this","createClass","point","Math","floor","random","SnakeModel","direction","arguments","undefined","RIGHT","_this$body","toArray","head","slice","equals","slicedToArray","tail","TOP","concat","toConsumableArray","BOTTOM","LEFT","canChangeDirection","moveInterval","setInterval","App","_useGame","_useState","useState","_useState2","gameState","setGameState","_useState3","_useState4","speed","setSpeed","_useState5","_useState6","setFruit","_useState7","initialSnake","_useState8","setSnake","useEffect","document","onkeydown","e","keyCode","setDirection","clearInterval","movedSnake","move","snakeEatenSelf","hasEatenSelf","snakeLeftGrid","hasLeftGrid","getHead","feedSnake","s","ceil","handleResetGame","useGame","game_GameContext","Provider","components_game_Game","ReactDOM","render","components_app_App","getElementById"],"mappings":"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","file":"static/js/main.fba9fe42.chunk.js","sourcesContent":["export enum Direction {\n  TOP = 'TOP',\n  BOTTOM = 'BOTTOM',\n  LEFT = 'LEFT',\n  RIGHT = 'RIGHT',\n}\n\nexport enum GameState {\n  MENU = 'MENU',\n  PLAY = 'PLAY',\n  END = 'END',\n}\n","import React from 'react';\nimport './Cell.css';\n\nconst Cell: React.FC = () => <div className=\"Cell\" />;\n\nexport default Cell;\n","import { createContext } from 'react';\nimport { GameState } from '../../enums';\n\nexport interface GameContextProps {\n  state: GameState;\n\n  onResetGame(): void;\n  onStateChange(state: GameState): void;\n}\n\nconst GameContext = createContext<GameContextProps>({\n  state: GameState.MENU,\n\n  // tslint:disable-next-line:no-empty\n  onResetGame() {},\n  onStateChange(_state: GameState) {},\n});\n\nexport default GameContext;\n","import React, { useContext } from 'react';\nimport GameContext from '../GameContext';\nimport './End.css';\n\nconst End: React.FC = () => {\n  const { onResetGame } = useContext(GameContext);\n\n  return (\n    <div className=\"End\">\n      <div>\n        <button className=\"EndResumeButton\" onClick={onResetGame}>PLAY AGAIN</button>\n      </div>\n    </div>\n  );\n};\n\nexport default End;\n","import React from 'react';\nimport './Fruit.css';\n\nconst Fruit: React.FC = () => <div className=\"Fruit\" />;\n\nexport default Fruit;\n","import React, { useCallback, useContext } from 'react';\nimport { GameState } from '../../../enums';\nimport GameContext from '../GameContext';\nimport './Menu.css';\n\nconst Menu: React.FC = () => {\n  const { state, onStateChange } = useContext(GameContext);\n  const handleResume = useCallback(() => {\n    if (state === GameState.MENU) {\n      onStateChange(GameState.PLAY);\n    }\n  }, [state, onStateChange]);\n\n  return (\n    <div className=\"Menu\">\n      <div>\n        <button className=\"MenuResumeButton\" onClick={handleResume}>RESUME</button>\n      </div>\n    </div>\n  );\n};\n\nexport default Menu;\n","import React from 'react';\nimport './SnakeBody.css';\n\nconst SnakeBody: React.FC = () => <div className=\"SnakeBody\" />;\n\nexport default SnakeBody;\n","import React from 'react';\nimport './SnakeHead.css';\n\nconst SnakeHead: React.FC = () => <div className=\"SnakeHead\" />;\n\nexport default SnakeHead;\n","import React from 'react';\nimport { GameState } from '../../enums';\nimport { PointModel } from '../../models/PointModel';\nimport { SnakeModel } from '../../models/SnakeModel';\nimport './Game.css';\nimport Cell from './cell/Cell';\nimport End from './end/End';\nimport Fruit from './fruit/Fruit';\nimport Menu from './menu/Menu';\nimport SnakeBody from './snake-body/SnakeBody';\nimport SnakeHead from './snake-head/SnakeHead';\n\ninterface GameProps {\n  gridSize: number;\n  snake: SnakeModel;\n  fruit: PointModel;\n  state: GameState;\n}\n\nconst Game: React.FC<GameProps> = ({ fruit, snake, gridSize, state }) => (\n  <div className=\"Game\">\n    {state === GameState.MENU && (\n      <Menu />\n    )}\n    {state === GameState.END && (\n      <End />\n    )}\n    {Array.from({ length: gridSize })\n      .map((value, index) => index)\n      .map(osY => (\n        <div className=\"OsX\" key={osY}>\n          {Array.from({ length: gridSize })\n            .map((value, index) => index)\n            .map(osX => {\n              const snakeCellIndex = snake.body\n                .findIndex(bodyPart => bodyPart.x === osX && bodyPart.y === osY);\n              const snakeCell = snakeCellIndex >= 0;\n\n              if (snakeCell) {\n                if (snakeCellIndex === 0) {\n                  return <SnakeHead key={osX} />;\n                }\n\n                return <SnakeBody key={osX} />;\n              }\n\n              if (osX === fruit.x && osY === fruit.y) {\n                return (\n                  <Fruit key={osX} />\n                );\n              }\n\n              return (\n                <Cell key={osX} />\n              );\n            })\n          }\n        </div>\n      ))\n    }\n  </div>\n);\n\nexport default Game;\n","export class PointModel {\n  constructor(\n    readonly x: number,\n    readonly y: number,\n  ) {}\n\n  public equals(point: PointModel): boolean {\n    return this.x === point.x && this.y === point.y;\n  }\n\n  public static random(gridSize: number): PointModel {\n    return new PointModel(Math.floor(Math.random() * gridSize), Math.floor(Math.random() * gridSize));\n  }\n}\n","import { Direction } from '../enums';\nimport { PointModel } from './PointModel';\n\nexport class SnakeModel {\n  constructor(\n    readonly body: PointModel[],\n    readonly direction: Direction = Direction.RIGHT,\n  ) {}\n\n  public static initialSnake(gridSize: number): SnakeModel {\n    return new SnakeModel(\n      [\n        new PointModel(gridSize / 2, gridSize / 2),\n        new PointModel(gridSize / 2, gridSize / 2 + 1),\n      ],\n      Direction.LEFT,\n    );\n  }\n\n  getHead(): PointModel {\n    return this.body[0];\n  }\n\n  hasEatenSelf(): boolean {\n    const [head, ...body] = this.body;\n\n    return body.findIndex(bodyPart => bodyPart.equals(head)) >= 0;\n  }\n\n  hasLeftGrid(gridSize: number): boolean {\n    const [head] = this.body;\n\n    return head.x < 0 || head.y < 0 || head.x > gridSize - 1 || head.y > gridSize - 1;\n  }\n\n  feedSnake(): SnakeModel {\n    const tail = this.body[this.body.length - 1];\n\n    switch (this.direction) {\n      case Direction.TOP:\n        return new SnakeModel(\n          [\n            ...this.body,\n            new PointModel(tail.x, tail.y - 1),\n          ],\n          this.direction\n        );\n      case Direction.BOTTOM:\n        return new SnakeModel(\n          [\n            ...this.body,\n            new PointModel(tail.x, tail.y + 1),\n          ],\n          this.direction\n        );\n      case Direction.LEFT:\n        return new SnakeModel(\n          [\n            ...this.body,\n            new PointModel(tail.x + 1, tail.y),\n          ],\n          this.direction\n        );\n      case Direction.RIGHT:\n        return new SnakeModel(\n          [\n            ...this.body,\n            new PointModel(tail.x - 1, tail.y - 1),\n          ],\n          this.direction\n        );\n    }\n\n    return this;\n  }\n\n  public move(): SnakeModel {\n    switch (this.direction) {\n      case Direction.TOP:\n        return new SnakeModel(\n          [\n            new PointModel(this.body[0].x, this.body[0].y - 1),\n            ...this.body.slice(0, this.body.length - 1),\n          ],\n          this.direction\n        );\n      case Direction.BOTTOM:\n        return new SnakeModel(\n          [\n            new PointModel(this.body[0].x, this.body[0].y + 1),\n            ...this.body.slice(0, this.body.length - 1),\n          ],\n          this.direction\n        );\n      case Direction.LEFT:\n        return new SnakeModel(\n          [\n            new PointModel(this.body[0].x - 1, this.body[0].y),\n            ...this.body.slice(0, this.body.length - 1),\n          ],\n          this.direction\n        );\n      case Direction.RIGHT:\n        return new SnakeModel(\n          [\n            new PointModel(this.body[0].x + 1, this.body[0].y),\n            ...this.body.slice(0, this.body.length - 1),\n          ],\n          this.direction\n        );\n    }\n\n    return this;\n  }\n\n  public setDirection(direction: Direction): SnakeModel {\n    if (this.canChangeDirection(direction)) {\n      return new SnakeModel(\n        this.body,\n        direction,\n      );\n    }\n\n    return this;\n  }\n\n  private canChangeDirection(direction: Direction) {\n    switch (direction) {\n      case Direction.TOP: {\n        return this.direction !== Direction.BOTTOM;\n      }\n      case Direction.BOTTOM: {\n        return this.direction !== Direction.TOP;\n      }\n      case Direction.LEFT: {\n        return this.direction !== Direction.RIGHT;\n      }\n      case Direction.RIGHT: {\n        return this.direction !== Direction.LEFT;\n      }\n      default:\n        return true;\n    }\n  }\n}\n","import { KeyboardEvent, useCallback, useEffect, useState } from 'react';\nimport { GRID_SIZE, INITIAL_SPEED } from '../../constans';\nimport { Direction, GameState } from '../../enums';\nimport { PointModel } from '../../models/PointModel';\nimport { SnakeModel } from '../../models/SnakeModel';\n\nlet moveInterval = setInterval(() => {}, 1000000);\n\nexport default () => {\n  const [gameState, setGameState] = useState(GameState.PLAY);\n  const [speed, setSpeed] = useState(INITIAL_SPEED);\n  const [fruit, setFruit] = useState(PointModel.random(GRID_SIZE));\n  const [snake, setSnake] = useState(SnakeModel.initialSnake(GRID_SIZE));\n\n  useEffect(() => {\n    const handleKeyPressed = (e: KeyboardEvent) => {\n      if (e.keyCode === 38 || e.keyCode === 87) { // up arrow\n        setSnake(snake => snake.setDirection(Direction.TOP));\n      }\n      else if (e.keyCode === 40 || e.keyCode === 83) { // down arrow\n        setSnake(snake => snake.setDirection(Direction.BOTTOM));\n      }\n      else if (e.keyCode === 37 || e.keyCode === 65) { // left arrow\n        setSnake(snake => snake.setDirection(Direction.LEFT));\n      }\n      else if (e.keyCode === 39 || e.keyCode === 68) { // right arrow\n        setSnake(snake => snake.setDirection(Direction.RIGHT));\n      }\n      else if (e.keyCode === 27) { // right arrow\n        if (gameState === GameState.PLAY) {\n          setGameState(GameState.MENU);\n        }\n      }\n    };\n\n    // @ts-ignore\n    document.onkeydown = handleKeyPressed;\n\n    // #todo dlaczego to nie działa?\n    // document.addEventListener(\"onkeydown\", handleKeyPressed);\n    //\n    // return () => {\n    //   document.removeEventListener(\"onkeydown\", handleKeyPressed);\n    // }\n  }, [gameState]);\n\n  useEffect(() => {\n    clearInterval(moveInterval);\n    moveInterval = setInterval(() => {\n      if (gameState === GameState.PLAY) {\n        setSnake(snake => {\n          const movedSnake = snake.move();\n          const snakeEatenSelf = movedSnake.hasEatenSelf();\n          const snakeLeftGrid = movedSnake.hasLeftGrid(GRID_SIZE);\n\n          if (snakeEatenSelf || snakeLeftGrid) {\n            setGameState(GameState.END);\n\n            return snake;\n          }\n\n          return movedSnake;\n        });\n      }\n    }, speed);\n  }, [gameState, speed]);\n\n  useEffect(() => {\n    const fruitEaten = snake.getHead().equals(fruit);\n\n    if (fruitEaten) {\n      setSnake(snake => snake.feedSnake());\n      setFruit(PointModel.random(GRID_SIZE));\n      setSpeed(s => Math.ceil(s * 0.7));\n    }\n  }, [snake, fruit]);\n\n  const handleResetGame = useCallback(() => {\n    setGameState(GameState.PLAY);\n    setSnake(SnakeModel.initialSnake(GRID_SIZE));\n  }, []);\n\n  return {\n    snake,\n    fruit,\n    gameState,\n    setGameState,\n    handleResetGame,\n  }\n}\n","import React  from 'react';\nimport { GRID_SIZE } from '../../constans';\nimport Game from '../game/Game';\nimport GameContext from '../game/GameContext';\nimport './App.css';\nimport useGame from '../game/useGame';\n\n\n\nconst App: React.FC = () => {\n  const { snake, setGameState, gameState, fruit, handleResetGame } = useGame();\n\n  return (\n    <div className=\"App\">\n      <GameContext.Provider value={{\n        state: gameState,\n        onStateChange: setGameState,\n        onResetGame: handleResetGame,\n      }}>\n        <Game gridSize={GRID_SIZE} snake={snake} fruit={fruit} state={gameState} />\n      </GameContext.Provider>\n    </div>\n  );\n};\n\nexport default App;\n","export const GRID_SIZE = 50;\nexport const INITIAL_SPEED = 300;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}