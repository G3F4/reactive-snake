{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["DIRECTION","Point","x","y","Object","classCallCheck","this","Snake","body","direction","arguments","length","undefined","RIGHT","TOP","concat","toConsumableArray","slice","BOTTOM","LEFT","App","_useState","useState","GRID_SIZE","_useState2","slicedToArray","snake","setSnake","useEffect","document","onkeydown","e","keyCode","setDirection","setInterval","move","react_default","a","createElement","className","Array","from","map","value","index","osY","osX","findIndex","bodyPart","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.889c904d.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css';\n\nconst GRID_SIZE = 50;\nconst TICK = 500;\n\nenum DIRECTION {\n  TOP = 'TOP',\n  BOTTOM = 'BOTTOM',\n  LEFT = 'LEFT',\n  RIGHT = 'RIGHT',\n}\n\nclass Point {\n  constructor(\n    readonly x: number,\n    readonly y: number,\n  ) {}\n}\n\nclass Snake {\n  constructor(\n    readonly body: Point[],\n    readonly direction: DIRECTION = DIRECTION.RIGHT,\n  ) {}\n\n  public move(): Snake {\n    switch (this.direction) {\n      case DIRECTION.TOP:\n        return new Snake(\n          [\n            new Point(this.body[0].x, this.body[0].y - 1),\n            ...this.body.slice(0, this.body.length - 1),\n          ],\n          this.direction\n        );\n      case DIRECTION.BOTTOM:\n        return new Snake(\n          [\n            new Point(this.body[0].x, this.body[0].y + 1),\n            ...this.body.slice(0, this.body.length - 1),\n          ],\n          this.direction\n        );\n      case DIRECTION.LEFT:\n        return new Snake(\n          [\n            new Point(this.body[0].x - 1, this.body[0].y),\n            ...this.body.slice(0, this.body.length - 1),\n          ],\n          this.direction\n        );\n      case DIRECTION.RIGHT:\n        return new Snake(\n          [\n            new Point(this.body[0].x + 1, this.body[0].y),\n            ...this.body.slice(0, this.body.length - 1),\n          ],\n          this.direction\n        );\n    }\n\n    return this;\n  }\n\n  public setDirection(direction: DIRECTION): Snake {\n    return new Snake(\n      this.body,\n      direction,\n    );\n  }\n}\n\nconst App: React.FC = () => {\n  const [snake, setSnake] = useState(\n    new Snake(\n      [\n        new Point(GRID_SIZE / 2, GRID_SIZE / 2),\n        new Point(GRID_SIZE / 2, GRID_SIZE / 2 + 1)\n      ],\n    ),\n  );\n\n  useEffect(() => {\n    const handleKeyPressed = (e: any) => {\n      if (e.keyCode === 38) { // up arrow\n        setSnake(snake => snake.setDirection(DIRECTION.TOP));\n      }\n      else if (e.keyCode === 40) { // down arrow\n        setSnake(snake => snake.setDirection(DIRECTION.BOTTOM));\n      }\n      else if (e.keyCode === 37) { // left arrow\n        setSnake(snake => snake.setDirection(DIRECTION.LEFT));\n      }\n      else if (e.keyCode === 39) { // right arrow\n        setSnake(snake => snake.setDirection(DIRECTION.RIGHT));\n      }\n    };\n\n    document.onkeydown = handleKeyPressed;\n\n    // document.addEventListener(\"onkeydown\", handleKeyPressed);\n    //\n    // return () => {\n    //   document.removeEventListener(\"onkeydown\", handleKeyPressed);\n    // }\n  }, []);\n\n  useEffect(() => {\n    setInterval(() => {\n      setSnake(snake => snake.move());\n    }, TICK);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"Grid\">\n        {Array.from({ length: GRID_SIZE })\n          .map((value, index) => index)\n          .map(osY => (\n            <div className=\"GridRow\">\n              {Array.from({ length: GRID_SIZE })\n                .map((value, index) => index)\n                .map(osX => {\n                  const snakeCell = snake.body.findIndex(bodyPart => bodyPart.x === osX && bodyPart.y === osY) >= 0;\n\n                  if (snakeCell) {\n                    return (\n                      <div className=\"SnakePart\" />\n                    );\n                  }\n\n                  return (\n                    <div className=\"GridCell\" />\n                  );\n                })\n              }\n            </div>\n          ))\n        }\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}