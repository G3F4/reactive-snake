{"version":3,"sources":["enums.ts","models/Point.ts","models/Snake.ts","components/game/cell/Cell.tsx","components/game/fruit/Fruit.tsx","components/game/GameContext.ts","components/game/menu/Menu.tsx","components/game/snake-body/SnakeBody.tsx","components/game/snake-head/SnakeHead.tsx","components/game/Game.tsx","components/app/App.tsx","constans.ts","index.tsx"],"names":["Direction","GameState","Point","x","y","Object","classCallCheck","this","createClass","key","value","point","gridSize","Math","floor","random","Snake","body","direction","arguments","length","undefined","RIGHT","_this$body","toArray","head","slice","findIndex","bodyPart","equals","tail","TOP","concat","toConsumableArray","BOTTOM","LEFT","canChangeDirection","Cell","react_default","a","createElement","className","Fruit","GameContext","createContext","state","MENU","onStateChange","_state","Menu","_useContext","useContext","handleResume","useCallback","PLAY","onClick","SnakeBody","SnakeHead","Game","_ref","fruit","snake","game_menu_Menu","Array","from","map","index","osY","osX","snakeCellIndex","game_snake_head_SnakeHead","game_snake_body_SnakeBody","game_fruit_Fruit","game_cell_Cell","moveInterval","setInterval","App","_useState","useState","_useState2","slicedToArray","gameState","setGameState","_useState3","_useState4","speed","setSpeed","_useState5","_useState6","setFruit","_useState7","initialSnake","_useState8","setSnake","useEffect","document","onkeydown","e","keyCode","setDirection","clearInterval","movedSnake","move","snakeEatenSelf","hasEatenSelf","console","log","getHead","feedSnake","s","ceil","game_GameContext","Provider","components_game_Game","ReactDOM","render","components_app_App","getElementById"],"mappings":"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","file":"static/js/main.ff42d924.chunk.js","sourcesContent":["export enum Direction {\n  TOP = 'TOP',\n  BOTTOM = 'BOTTOM',\n  LEFT = 'LEFT',\n  RIGHT = 'RIGHT',\n}\n\nexport enum GameState {\n  MENU = 'MENU',\n  PLAY = 'PLAY',\n  END = 'END',\n}\n","export class Point {\n  constructor(\n    readonly x: number,\n    readonly y: number,\n  ) {}\n\n  public equals(point: Point): boolean {\n    return this.x === point.x && this.y === point.y;\n  }\n\n  public static random(gridSize: number): Point {\n    return new Point(Math.floor(Math.random() * gridSize), Math.floor(Math.random() * gridSize));\n  }\n}\n","import { Direction } from '../enums';\nimport { Point } from './Point';\n\nexport class Snake {\n  constructor(\n    readonly body: Point[],\n    readonly direction: Direction = Direction.RIGHT,\n  ) {}\n\n  public static initialSnake(gridSize: number): Snake {\n    return new Snake(\n      [\n        new Point(gridSize / 2, gridSize / 2),\n        new Point(gridSize / 2, gridSize / 2 + 1),\n      ],\n      Direction.LEFT,\n    );\n  }\n\n  getHead(): Point {\n    return this.body[0];\n  }\n\n  hasEatenSelf(): boolean {\n    const [head, ...body] = this.body;\n\n    return body.findIndex(bodyPart => bodyPart.equals(head)) >= 0;\n  }\n\n  feedSnake(): Snake {\n    const tail = this.body[this.body.length - 1];\n\n    switch (this.direction) {\n      case Direction.TOP:\n        return new Snake(\n          [\n            ...this.body,\n            new Point(tail.x, tail.y - 1),\n          ],\n          this.direction\n        );\n      case Direction.BOTTOM:\n        return new Snake(\n          [\n            ...this.body,\n            new Point(tail.x, tail.y + 1),\n          ],\n          this.direction\n        );\n      case Direction.LEFT:\n        return new Snake(\n          [\n            ...this.body,\n            new Point(tail.x + 1, tail.y),\n          ],\n          this.direction\n        );\n      case Direction.RIGHT:\n        return new Snake(\n          [\n            ...this.body,\n            new Point(tail.x - 1, tail.y - 1),\n          ],\n          this.direction\n        );\n    }\n\n    return this;\n  }\n\n  public move(): Snake {\n    switch (this.direction) {\n      case Direction.TOP:\n        return new Snake(\n          [\n            new Point(this.body[0].x, this.body[0].y - 1),\n            ...this.body.slice(0, this.body.length - 1),\n          ],\n          this.direction\n        );\n      case Direction.BOTTOM:\n        return new Snake(\n          [\n            new Point(this.body[0].x, this.body[0].y + 1),\n            ...this.body.slice(0, this.body.length - 1),\n          ],\n          this.direction\n        );\n      case Direction.LEFT:\n        return new Snake(\n          [\n            new Point(this.body[0].x - 1, this.body[0].y),\n            ...this.body.slice(0, this.body.length - 1),\n          ],\n          this.direction\n        );\n      case Direction.RIGHT:\n        return new Snake(\n          [\n            new Point(this.body[0].x + 1, this.body[0].y),\n            ...this.body.slice(0, this.body.length - 1),\n          ],\n          this.direction\n        );\n    }\n\n    return this;\n  }\n\n  public setDirection(direction: Direction): Snake {\n    if (this.canChangeDirection(direction)) {\n      return new Snake(\n        this.body,\n        direction,\n      );\n    }\n\n    return this;\n  }\n\n  private canChangeDirection(direction: Direction) {\n    switch (direction) {\n      case Direction.TOP: {\n        return this.direction !== Direction.BOTTOM;\n      }\n      case Direction.BOTTOM: {\n        return this.direction !== Direction.TOP;\n      }\n      case Direction.LEFT: {\n        return this.direction !== Direction.RIGHT;\n      }\n      case Direction.RIGHT: {\n        return this.direction !== Direction.LEFT;\n      }\n      default:\n        return true;\n    }\n  }\n}\n","import React from 'react';\nimport './Cell.css';\n\nconst Cell: React.FC = () => <div className=\"Cell\" />;\n\nexport default Cell;\n","import React from 'react';\nimport './Fruit.css';\n\nconst Fruit: React.FC = () => <div className=\"Fruit\" />;\n\nexport default Fruit;\n","import { createContext } from 'react';\nimport { GameState } from '../../enums';\n\nexport interface GameContextProps {\n  state: GameState;\n  onStateChange(state: GameState): void;\n}\n\nconst GameContext = createContext<GameContextProps>({\n  state: GameState.MENU,\n  // tslint:disable-next-line:no-empty\n  onStateChange(_state: GameState) {},\n});\n\nexport default GameContext;\n","import React, { useCallback, useContext } from 'react';\nimport { GameState } from '../../../enums';\nimport GameContext from '../GameContext';\nimport './Menu.css';\n\nconst Menu: React.FC = () => {\n  const { state, onStateChange } = useContext(GameContext);\n  const handleResume = useCallback(() => {\n    if (state === GameState.MENU) {\n      onStateChange(GameState.PLAY);\n    }\n  }, [state, onStateChange]);\n\n  return (\n    <div className=\"Menu\">\n      <div>\n        <button className=\"MenuResumeButton\" onClick={handleResume}>RESUME</button>\n      </div>\n    </div>\n  );\n};\n\nexport default Menu;\n","import React from 'react';\nimport './SnakeBody.css';\n\nconst SnakeBody: React.FC = () => <div className=\"SnakeBody\" />;\n\nexport default SnakeBody;\n","import React from 'react';\nimport './SnakeHead.css';\n\nconst SnakeHead: React.FC = () => <div className=\"SnakeHead\" />;\n\nexport default SnakeHead;\n","import React from 'react';\nimport { GameState } from '../../enums';\nimport { Point } from '../../models/Point';\nimport { Snake } from '../../models/Snake';\nimport './Game.css';\nimport Cell from './cell/Cell';\nimport Fruit from './fruit/Fruit';\nimport Menu from './menu/Menu';\nimport SnakeBody from './snake-body/SnakeBody';\nimport SnakeHead from './snake-head/SnakeHead';\n\ninterface GameProps {\n  gridSize: number;\n  snake: Snake;\n  fruit: Point;\n  state: GameState;\n}\n\nconst Game: React.FC<GameProps> = ({ fruit, snake, gridSize, state }) => (\n  <div className=\"Game\">\n    {state === GameState.MENU && (\n      <Menu />\n    )}\n    {Array.from({ length: gridSize })\n      .map((value, index) => index)\n      .map(osY => (\n        <div className=\"OsX\" key={osY}>\n          {Array.from({ length: gridSize })\n            .map((value, index) => index)\n            .map(osX => {\n              const snakeCellIndex = snake.body\n                .findIndex(bodyPart => bodyPart.x === osX && bodyPart.y === osY);\n              const snakeCell = snakeCellIndex >= 0;\n\n              if (snakeCell) {\n                if (snakeCellIndex === 0) {\n                  return <SnakeHead key={osX} />;\n                }\n\n                return <SnakeBody key={osX} />;\n              }\n\n              if (osX === fruit.x && osY === fruit.y) {\n                return (\n                  <Fruit key={osX} />\n                );\n              }\n\n              return (\n                <Cell key={osX} />\n              );\n            })\n          }\n        </div>\n      ))\n    }\n  </div>\n);\n\nexport default Game;\n","import React, { KeyboardEvent, useEffect, useState } from 'react';\nimport { GRID_SIZE, INITIAL_SPEED } from '../../constans';\nimport { Direction, GameState } from '../../enums';\nimport { Point } from '../../models/Point';\nimport { Snake } from '../../models/Snake';\nimport Game from '../game/Game';\nimport './App.css';\nimport GameContext from '../game/GameContext';\n\nlet moveInterval = setInterval(() => {}, 1000000);\n\nconst App: React.FC = () => {\n  const [gameState, setGameState] = useState(GameState.PLAY);\n  const [speed, setSpeed] = useState(INITIAL_SPEED);\n  const [fruit, setFruit] = useState(Point.random(GRID_SIZE));\n  const [snake, setSnake] = useState(Snake.initialSnake(GRID_SIZE));\n\n  useEffect(() => {\n    const handleKeyPressed = (e: KeyboardEvent) => {\n      if (e.keyCode === 38 || e.keyCode === 87) { // up arrow\n        setSnake(snake => snake.setDirection(Direction.TOP));\n      }\n      else if (e.keyCode === 40 || e.keyCode === 83) { // down arrow\n        setSnake(snake => snake.setDirection(Direction.BOTTOM));\n      }\n      else if (e.keyCode === 37 || e.keyCode === 65) { // left arrow\n        setSnake(snake => snake.setDirection(Direction.LEFT));\n      }\n      else if (e.keyCode === 39 || e.keyCode === 68) { // right arrow\n        setSnake(snake => snake.setDirection(Direction.RIGHT));\n      }\n      else if (e.keyCode === 27) { // right arrow\n        if (gameState === GameState.PLAY) {\n          setGameState(GameState.MENU);\n        }\n      }\n    };\n\n    // @ts-ignore\n    document.onkeydown = handleKeyPressed;\n\n    // #todo dlaczego to nie działa?\n    // document.addEventListener(\"onkeydown\", handleKeyPressed);\n    //\n    // return () => {\n    //   document.removeEventListener(\"onkeydown\", handleKeyPressed);\n    // }\n  }, [gameState]);\n\n  useEffect(() => {\n    clearInterval(moveInterval);\n    moveInterval = setInterval(() => {\n      if (gameState === GameState.PLAY) {\n        setSnake(snake => {\n          const movedSnake = snake.move();\n          const snakeEatenSelf = movedSnake.hasEatenSelf();\n\n          console.log(['snakeEatenSelf'], snakeEatenSelf)\n\n          return movedSnake;\n        });\n      }\n    }, speed);\n  }, [gameState, speed]);\n\n  useEffect(() => {\n    const fruitEaten = snake.getHead().equals(fruit);\n\n    if (fruitEaten) {\n      setSnake(snake => snake.feedSnake());\n      setFruit(Point.random(GRID_SIZE));\n      setSpeed(s => Math.ceil(s * 0.7));\n    }\n  }, [snake, fruit]);\n\n  return (\n    <div className=\"App\">\n      <GameContext.Provider value={{\n        state: gameState,\n        onStateChange: setGameState,\n      }}>\n        <Game gridSize={GRID_SIZE} snake={snake} fruit={fruit} state={gameState} />\n      </GameContext.Provider>\n    </div>\n  );\n};\n\nexport default App;\n","export const GRID_SIZE = 50;\nexport const INITIAL_SPEED = 300;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}